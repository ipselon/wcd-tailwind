[{"filePath":"DEMO/src/usr/README.md","declarations":[{"markdownContent":"### Create new page\n\n<a href=\"https://raw.githubusercontent.com/react-ui-builder/wcd-tailwind/master/imgages/create-page.png\" target=\"_blank\">\n<img src=\"https://raw.githubusercontent.com/react-ui-builder/wcd-tailwind/master/imgages/create-page.png\" />\n</a>"}],"resourceType":"RESOURCE_IN_MARKDOWN_TYPE"},{"filePath":"DEMO/src/usr/table/Col.comp.tsx","declarations":[{"componentName":"Col","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"span","propertyComment":"\n This attribute contains a positive integer indicating the number of consecutive columns the <col> element spans.\n If not present, its default value is 1.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Colgroup.comp.tsx","declarations":[{"componentName":"Colgroup","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/TBody.comp.tsx","declarations":[{"componentName":"TBody","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/commons/Empty.props.ts","declarations":[{"name":"EmptyTypes","properties":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/commons/Global.props.ts","declarations":[{"name":"GlobalTypes","properties":[{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"tabindex","propertyComment":"\n An integer attribute indicating if the element can take input focus (is focusable),\n if it should participate to sequential keyboard navigation, and if so, at what position.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"title","propertyComment":"\n Contains a text representing advisory information related to the element it belongs to.\n Such information can typically, but not necessarily, be presented to the user as a tooltip.\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/commons/ListItem.props.ts","declarations":[{"name":"ListItemTypes","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"value","propertyComment":"\n An integer attribute indicates the current ordinal value of the list item.\n The value attribute has no meaning for unordered lists.\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/commons/Section.props.ts","declarations":[{"name":"SectionTypes","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/commons/SectionOrText.props.ts","declarations":[{"name":"SectionOrTextTypes","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements.\n > If there is an element in the children property the text is not rendered.\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n Text content value.\n > If there is an element in the children property the text is not rendered.\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/table/THead.comp.tsx","declarations":[{"componentName":"THead","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/commons/Text.props.ts","declarations":[{"name":"TextTypes","properties":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n Text content value\n","propertyValue":null}}]}],"resourceType":"RESOURCE_IN_PROP_TYPES_TYPE"},{"filePath":"DEMO/src/usr/link/A.comp.tsx","declarations":[{"componentName":"A","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"download","propertyComment":"\n Prompts the user to save the linked URL instead of navigating to it.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"href","propertyComment":"\n The URL that the hyperlink points to.\n Links are not restricted to HTTP-based URLs â€” they can use any URL scheme supported by browsers\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"hreflang","propertyComment":"\n Hints at the human language of the linked URL.\n No built-in functionality. Allowed values are the same as the global lang attribute.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"ping","propertyComment":"\n A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs.\n Typically for tracking.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"rel","propertyComment":"\n The relationship of the linked URL as space-separated link types.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"target","propertyComment":"\n Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>). The following keywords have special meanings for where to load the URL:\n * _self: the current browsing context. (Default)\n * _blank: usually a new tab, but users can configure browsers to open a new window instead.\n * _parent: the parent browsing context of the current one. If no parent, behaves as _self.\n * _top: the topmost browsing context (the \"highest\" context thatâ€™s an ancestor of the current one). If no ancestors, behaves as _self.\n","propertyValue":null,"propertyValueVariants":[{"value":""},{"value":"_self"},{"value":"_blank"},{"value":"_parent"},{"value":"_top"}]}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n Text content value.\n > If there is an element in the children property the text is not rendered.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"type","propertyComment":"\n Hints at the linked URLâ€™s format with a MIME type. No built-in functionality.\n","propertyValue":null}}],"defaultProps":{"href":"#","text":"Link label"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/media/Img.comp.tsx","declarations":[{"componentName":"Img","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"alt","propertyComment":"\n Defines an alternative text description of the image.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"height","propertyComment":"\n The intrinsic height of the image, in pixels. Must be an integer without a unit.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"src","propertyComment":"\n The image URL. Mandatory for the <img> element.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"width","propertyComment":"\n The intrinsic width of the image in pixels. Must be an integer without a unit.\n","propertyValue":null}}],"defaultProps":{"alt":"No Image"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Button.comp.tsx","declarations":[{"componentName":"Button","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autofocus","propertyComment":"\n This Boolean attribute specifies that the button should have input focus when the page loads.\n Only one element in a document can have this attribute.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements.\n > If there is an element in the children property the text is not rendered.\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"disabled","propertyComment":"\n This Boolean attribute prevents the user from interacting with the button: it cannot be pressed or focused.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"name","propertyComment":"\n The name of the button, submitted as a pair with the buttonâ€™s value as part of the form data.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n Text content value.\n > If there is an element in the children property the text is not rendered.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"type","propertyComment":"\n The default behavior of the button. Possible values are:\n * submit: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a <form>, or if the attribute is an empty or invalid value.\n * button: The button has no default behavior, and does nothing when pressed by default. It can have client-side scripts listen to the element's events, which are triggered when the events occur.\n","propertyValue":null,"propertyValueVariants":[{"value":""},{"value":"button"},{"value":"submit"}]}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"value","propertyComment":"\n Defines the value associated with the buttonâ€™s name when itâ€™s submitted with the form data.\n This value is passed to the server in params when the form is submitted.\n","propertyValue":null}}],"defaultProps":{"type":"button","text":"Button"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Fieldset.comp.tsx","declarations":[{"componentName":"Fieldset","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Table.comp.tsx","declarations":[{"componentName":"Table","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Form.comp.tsx","declarations":[{"componentName":"Form","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Input.comp.tsx","declarations":[{"componentName":"Input","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"accept","propertyComment":"\n Hint for expected file type in file upload controls\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"alt","propertyComment":"\n `alt` attribute for the image type. Required for accessibility\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autocomplete","propertyComment":"\n Hint for form autofill feature\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autofocus","propertyComment":"\n Automatically focus the form control when the page is loaded\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"checked","propertyComment":"\n Whether the command or control is checked. Valid for both radio and checkbox types.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"dirname","propertyComment":"\n Name of form field to use for sending the element's directionality in form submission\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"disabled","propertyComment":"\n Whether the form control is disabled\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"form","propertyComment":"\n Associates the control with a form element\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"max","propertyComment":"\n Maximum value\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"maxlength","propertyComment":"\n Maximum length (number of characters) of `value`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"min","propertyComment":"\n Minimum value\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"minlength","propertyComment":"\n Minimum length (number of characters) of `value`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"name","propertyComment":"\n Name of the form control. Submitted with the form as part of a name/value pair.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"pattern","propertyComment":"\n Pattern the `value` must match to be valid. The pattern attribute, when specified, is a regular expression that the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"placeholder","propertyComment":"\n Text that appears in the form control when it has no value set\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"readonly","propertyComment":"\n The value is not editable\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"required","propertyComment":"\n A value is required or must be check for the form to be submittable\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"size","propertyComment":"\n Size of the control. Valid for email, password, tel, and text input types only. Specifies how much of the input is shown. Basically creates same result as setting CSS width property with a few specialities. The actual unit of the value depends on the input type.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"src","propertyComment":"\n Same as src attribute for `<img>` address of image element\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"step","propertyComment":"\n Incremental values that are valid.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"type","propertyComment":"\n How an <input> works varies considerably depending on the value of its type attribute.\n * `button` - a push button with no default behavior displaying the value of the value attribute, empty by default.\n * `checkbox` - a check box allowing single values to be selected/deselected.\n * `color` - a control for specifying a color; opening a color picker when active in supporting browsers.\n * `date` - a control for entering a date (year, month, and day, with no time). Opens a date picker or numeric wheels for year, month, day when active in supporting browsers.\n * `datetime-local` - a control for entering a date and time, with no time zone. Opens a date picker or numeric wheels for date- and time-components when active in supporting browsers.\n * `email` - a field for editing an email address. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards.\n * `file` - a control that lets the user select a file. Use the accept attribute to define the types of files that the control can select.\n * `hidden` - a control that is not displayed but whose value is submitted to the server. There is an example in the next column, but it's hidden!\n * `image` - a graphical submit button. Displays an image defined by the src attribute. The alt attribute displays if the image src is missing.\n * `month` - a control for entering a month and year, with no time zone.\n * `number` - a control for entering a number. Displays a spinner and adds default validation when supported. Displays a numeric keypad in some devices with dynamic keypads.\n * `password` - a single-line text field whose value is obscured. Will alert user if site is not secure.\n * `radio` - a radio button, allowing a single value to be selected out of multiple choices with the same name value.\n * `range` - a control for entering a number whose exact value is not important. Displays as a range widget defaulting to the middle value. Used in conjunction min and max to define the range of acceptable values.\n * `reset` - a button that resets the contents of the form to default values. Not recommended.\n * `search` - a single-line text field for entering search strings. Line-breaks are automatically removed from the input value. May include a delete icon in supporting browsers that can be used to clear the field. Displays a search icon instead of enter key on some devices with dynamic keypads.\n * `submit` - a button that submits the form.\n * `tel` - a control for entering a telephone number. Displays a telephone keypad in some devices with dynamic keypads.\n * `text` - a single-line text field. Line-breaks are automatically removed from the input value.\n * `time` - a control for entering a time value with no time zone.\n * `url` - a field for entering a URL. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards.\n * `week` - a control for entering a date consisting of a week-year number and a week number with no time zone.\n","propertyValue":null,"propertyValueVariants":[{"value":""},{"value":"button"},{"value":"checkbox"},{"value":"color"},{"value":"date"},{"value":"datetime-local"},{"value":"email"},{"value":"file"},{"value":"hidden"},{"value":"image"},{"value":"month"},{"value":"number"},{"value":"password"},{"value":"radio"},{"value":"range"},{"value":"reset"},{"value":"search"},{"value":"submit"},{"value":"tel"},{"value":"text"},{"value":"time"},{"value":"url"},{"value":"week"}]}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"value","propertyComment":"\n The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective HTMLInputElement object's value property. The value attribute is always optional, though should be considered mandatory for checkbox, radio, and hidden.\n","propertyValue":null}}],"defaultProps":{"type":"text","placeholder":"Enter text"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Label.comp.tsx","declarations":[{"componentName":"Label","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Label"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Legend.comp.tsx","declarations":[{"componentName":"Legend","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Text.TextTypes","defaultProps":{"text":"Fieldset Legend"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Option.comp.tsx","declarations":[{"componentName":"Option","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"disabled","propertyComment":"\n Whether the form control is disabled\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"label","propertyComment":"\n This attribute is text for the label indicating the meaning of the option. If the label attribute isn't defined, its value is that of the element text content.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"selected","propertyComment":"\n If present, this Boolean attribute indicates that the option is initially selected.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n Text content value\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"value","propertyComment":"\n The content of this attribute represents the value to be submitted with the form, should this option be selected.\n","propertyValue":null}}],"defaultProps":{"value":"option_value","text":"Option value"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Td.comp.tsx","declarations":[{"componentName":"Td","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"colSpan","propertyComment":"\n This attribute contains a non-negative integer value that indicates for how many columns the cell extends.\n Its default value is 1.\n Values higher than 1000 will be considered as incorrect and will be set to the default value (1).\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"rowSpan","propertyComment":"\n This attribute contains a non-negative integer value that indicates for how many rows the cell extends.\n Its default value is 1; if its value is set to 0, it extends until the end of the table section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the cell belongs to.\n Values higher than 65534 are clipped down to 65534.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Select.comp.tsx","declarations":[{"componentName":"Select","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autocomplete","propertyComment":"\n A DOMString providing a hint for a user agent's autocomplete feature.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autofocus","propertyComment":"\n Automatically focus the form control when the page is loaded\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"disabled","propertyComment":"\n Whether the form control is disabled\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"form","propertyComment":"\n Associates the control with a form element\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"multiple","propertyComment":"\n This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When multiple is specified, most browsers will show a scrolling list box instead of a single line dropdown.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"name","propertyComment":"\n Name of the form control. Submitted with the form as part of a name/value pair.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"required","propertyComment":"\n A value is required or must be check for the form to be submittable\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"size","propertyComment":"\n If the control is presented as a scrolling list box (e.g. when multiple is specified), this attribute represents the number of rows in the list that should be visible at one time.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/form/Textarea.comp.tsx","declarations":[{"componentName":"Textarea","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"autofocus","propertyComment":"\n Automatically focus the form control when the page is loaded\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"cols","propertyComment":"\n The visible width of the text control, in average character widths.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"disabled","propertyComment":"\n Whether the form control is disabled\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"form","propertyComment":"\n Associates the control with a form element\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"maxlength","propertyComment":"\n Maximum length (number of characters) of `value`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"minlength","propertyComment":"\n Minimum length (number of characters) of `value`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"name","propertyComment":"\n Name of the form control. Submitted with the form as part of a name/value pair.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"placeholder","propertyComment":"\n Text that appears in the form control when it has no value set\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"readonly","propertyComment":"\n The value is not editable\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"required","propertyComment":"\n A value is required or must be check for the form to be submittable\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"rows","propertyComment":"\n The number of visible text lines for the control.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","propertyComment":"\n The input control's value.\n","propertyValue":null}}],"defaultProps":{"rows":4,"placeholder":"Enter text"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Article.comp.tsx","declarations":[{"componentName":"Article","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Blockquote.comp.tsx","declarations":[{"componentName":"Blockquote","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Div.comp.tsx","declarations":[{"componentName":"Div","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"backgroundImageUrl","propertyComment":"\n URL for the background image\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Footer.comp.tsx","declarations":[{"componentName":"Footer","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/HGroup.comp.tsx","declarations":[{"componentName":"HGroup","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Header.comp.tsx","declarations":[],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Main.comp.tsx","declarations":[{"componentName":"Main","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Nav.comp.tsx","declarations":[{"componentName":"Nav","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/section/Section.comp.tsx","declarations":[{"componentName":"Section","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/svg/Path.comp.tsx","declarations":[{"componentName":"Path","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"d","propertyComment":"\n This attribute defines the shape of the path.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/svg/Svg.comp.tsx","declarations":[{"componentName":"Svg","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"viewBox","propertyComment":"\n Defines the position and dimension, in user space, of an SVG viewport.\n\n The value of the viewBox attribute is a list of four numbers: min-x, min-y, width and height. The numbers separated by whitespace and/or a comma, which specify a rectangle in user space which is mapped to the bounds of the viewport established for the associated SVG element\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Dd.comp.tsx","declarations":[{"componentName":"Dd","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Text.TextTypes","defaultProps":{"text":"Description Text"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Dl.comp.tsx","declarations":[{"componentName":"Dl","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Dt.comp.tsx","declarations":[{"componentName":"Dt","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Text.TextTypes","defaultProps":{"text":"Description Term"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Li.comp.tsx","declarations":[{"componentName":"Li","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Ol.comp.tsx","declarations":[{"componentName":"Ol","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"reversed","propertyComment":"\n A Boolean attribute specifies that the listâ€™s items are in reverse order.\n Items will be numbered from high to low.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"start","propertyComment":"\n An integer to start counting from for the list items.\n Always an Arabic numeral (1, 2, 3, etc.), even when the numbering type is letters or Roman numerals.\n For example, to start numbering elements from the letter \"d\" or the Roman numeral \"iv,\" use start=\"4\".\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes `test`\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"type","propertyComment":"\n Sets the numbering type:\n * `a` for lowercase letters\n * `A` for uppercase letters\n * `i` for lowercase Roman numerals\n * `I` for uppercase Roman numerals\n * `1` for numbers (default)\n","propertyValue":null,"propertyValueVariants":[{"value":"a"},{"value":"A"},{"value":"i"},{"value":"I"},{"value":"1"}]}}],"defaultProps":{"type":"1","children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/list/Ul.comp.tsx","declarations":[{"componentName":"Ul","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/misc/Address.comp.tsx","declarations":[{"componentName":"Address","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/misc/Figcaption.comp.tsx","declarations":[{"componentName":"Figcaption","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Text.TextTypes","defaultProps":{"text":"New Text"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/misc/Figure.comp.tsx","declarations":[{"componentName":"Figure","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/misc/Hr.comp.tsx","declarations":[{"componentName":"Hr","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Empty.EmptyTypes","defaultProps":{}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Caption.comp.tsx","declarations":[{"componentName":"Caption","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Text.TextTypes","defaultProps":{"text":"Table Caption"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Th.comp.tsx","declarations":[{"componentName":"Th","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"children","propertyComment":"\n An array of the nested HTML elements\n","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"colSpan","propertyComment":"\n This attribute contains a non-negative integer value that indicates for how many columns the cell extends.\n Its default value is 1.\n Values higher than 1000 will be considered as incorrect and will be set to the default value (1).\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"globalAttrs","propertyComment":"\n Global attributes are attributes common to all HTML elements;\n they can be used on all elements, though they may have no effect on some elements.\n","externalProperties":"usr.commons.Global.GlobalTypes"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"rowSpan","propertyComment":"\n This attribute contains a non-negative integer value that indicates for how many rows the cell extends.\n Its default value is 1; if its value is set to 0, it extends until the end of the table section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the cell belongs to.\n Values higher than 65534 are clipped down to 65534.\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"tailwindUtilities","propertyComment":"\n Tail Wind Classes\n","propertyValue":null}}],"defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/table/Tr.comp.tsx","declarations":[{"componentName":"Tr","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.Section.SectionTypes","defaultProps":{"children":[{}]}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Abbr.comp.tsx","declarations":[{"componentName":"Abbr","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/B.comp.tsx","declarations":[{"componentName":"B","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Bdi.comp.tsx","declarations":[{"componentName":"Bdi","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Bdo.comp.tsx","declarations":[{"componentName":"Bdo","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Cite.comp.tsx","declarations":[{"componentName":"Cite","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Code.comp.tsx","declarations":[{"componentName":"Code","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Dfn.comp.tsx","declarations":[{"componentName":"Dfn","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Em.comp.tsx","declarations":[{"componentName":"Em","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/I.comp.tsx","declarations":[{"componentName":"I","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Kbd.comp.tsx","declarations":[{"componentName":"Kbd","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Mark.comp.tsx","declarations":[{"componentName":"Mark","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Pre.comp.tsx","declarations":[{"componentName":"Pre","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Q.comp.tsx","declarations":[{"componentName":"Q","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/S.comp.tsx","declarations":[{"componentName":"S","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Small.comp.tsx","declarations":[{"componentName":"Small","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Strong.comp.tsx","declarations":[{"componentName":"Strong","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Sub.comp.tsx","declarations":[{"componentName":"Sub","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text-decoration/Sup.comp.tsx","declarations":[{"componentName":"Sup","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H1.comp.tsx","declarations":[{"componentName":"H1","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H2.comp.tsx","declarations":[{"componentName":"H2","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H3.comp.tsx","declarations":[{"componentName":"H3","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H4.comp.tsx","declarations":[{"componentName":"H4","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H5.comp.tsx","declarations":[{"componentName":"H5","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/H6.comp.tsx","declarations":[{"componentName":"H6","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/P.comp.tsx","declarations":[{"componentName":"P","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/text/Span.comp.tsx","declarations":[{"componentName":"Span","wcdAnnotations":{"annotationComment":"\n This is a sample component, it shows how to create function wrappers.\n"},"externalProperties":"usr.commons.SectionOrText.SectionOrTextTypes","defaultProps":{"text":"Text here"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"}]
